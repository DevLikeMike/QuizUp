{"version":3,"sources":["components/pages/Welcome.js","components/pages/QuestionForm.js","components/pages/QuestionCard.js","components/pages/Display.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","setQuizInfo","quizInfo","setReady","history","ready","useHistory","onChange","e","target","name","value","className","id","onSubmit","numberOfQs","console","log","preventDefault","push","alert","autoComplete","type","required","QuestionForm","questions","setQuestions","author","quizName","useState","count","setCount","question","answerA","answerB","answerC","answerD","key","newQuestion","setNewQuestion","done","document","getElementById","correctAnswer","textArea","style","resize","onClick","Question","questionsMade","QuestionCard","choices","answerDisplay","questionDisplay","fieldSet","answerChoice","setAnswerChoice","display","backgroundColor","color","fontSize","innerText","setAttribute","htmlFor","Display","map","App","exact","path","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19e1d854.chunk.js","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Welcome = (props) => {\n  const { setQuizInfo, quizInfo, setReady, ready } = props;\n  const history = useHistory();\n\n  //Event Handling for component\n  //Set info(app level state)\n  const onChange = (e) => {\n    setQuizInfo({ ...quizInfo, [e.target.name]: e.target.value });\n  };\n  //Set the ready value to advance to the next page or the quiz creation\n  const onSubmit = (e) => {\n    if (quizInfo.numberOfQs === \"\") {\n      alert(\"Please select how many questions you would like\");\n      return;\n    }\n    console.log(quizInfo.numberOfQs);\n    e.preventDefault();\n    setReady(true);\n    history.push(\"/newquiz\");\n  };\n\n  return (\n    <Fragment>\n      <div className=\"container\" id=\"welcome\">\n        <h3>Welcome to QuizUp</h3>\n        <div className=\"row\">\n          <p className=\"eight columns\">\n            Online quiz maker for all your quizzing needs. Have questions to\n            ask? Need Answers fast? Well while you \"asking all them questions\",\n            let quiz up make it easy to generate your quiz! Our quizes provide\n            your basic A, B, C, D answers, and make it a breeze for you to make\n            up to ten multiple choice questions. Quiz Up is the leading quiz\n            generator for teachers all over the United States!\n          </p>\n        </div>\n        <form id=\"mainForm\" onSubmit={onSubmit} autoComplete=\"off\">\n          <div className=\"row\">\n            <div className=\"eight columns\">\n              <label>Name of your quiz?</label>\n              <input\n                type=\"text\"\n                name=\"quizName\"\n                id=\"quizName\"\n                className=\"u-full-width\"\n                onChange={onChange}\n                required\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"four columns\">\n              <label>Who is making the quiz?</label>\n              <input\n                type=\"text\"\n                name=\"author\"\n                id=\"author\"\n                className=\"u-full-width\"\n                onChange={onChange}\n                required\n              />\n            </div>\n            <div className=\"four columns\">\n              <label>How many questions would you like?</label>\n              <select\n                name=\"numberOfQs\"\n                id=\"numberOfQs\"\n                className=\"u-full-width\"\n                onChange={onChange}\n              >\n                <option value=\"\">Number of Questions</option>\n                <option value=\"1\">One</option>\n                <option value=\"2\">Two</option>\n                <option value=\"3\">Three</option>\n                <option value=\"4\">Four</option>\n                <option value=\"5\">Five</option>\n                <option value=\"6\">Six</option>\n                <option value=\"7\">Seven</option>\n                <option value=\"8\">Eight</option>\n                <option value=\"9\">Nine</option>\n                <option value=\"10\">Ten</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"eight columns\">\n              <button\n                className=\"button-primary u-full-width\"\n                type=\"submit\"\n                id=\"submit\"\n              >\n                Get Started\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Welcome;\n","import React, { useState, Fragment } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst QuestionForm = ({ quizInfo, questions, setQuestions, setQuizInfo }) => {\n  const history = useHistory();\n  //Deconstruct from props\n  const { numberOfQs, author, quizName } = quizInfo;\n  //Component State\n  let [count, setCount] = useState(1);\n  const [newQuestion, setNewQuestion] = useState({\n    question: \"\",\n    answerA: \"\",\n    answerB: \"\",\n    answerC: \"\",\n    answerD: \"\",\n    key: count,\n  });\n  //Done with questions flag\n  let done = false;\n  //Set HTML variables\n  const answerA = document.getElementById(\"answerA\");\n  const answerB = document.getElementById(\"answerB\");\n  const answerC = document.getElementById(\"answerC\");\n  const answerD = document.getElementById(\"answerD\");\n  const correctAnswer = document.getElementById(\"correctAnswer\");\n  const textArea = document.getElementById(\"textArea\");\n\n  //Function Declarations\n  //Reset all html variables to empty string, preparing for the next question to be entered\n  const reset = () => {\n    answerA.value = \"\";\n    answerB.value = \"\";\n    answerC.value = \"\";\n    answerD.value = \"\";\n    textArea.value = \"\";\n    correctAnswer.value = \"\";\n  };\n  //Event Handling\n  //Set values of new question\n  const onChange = (e) => {\n    setNewQuestion({ ...newQuestion, [e.target.name]: e.target.value });\n  };\n  //Submit question to questions array(app level state)\n  const onClick = (e) => {\n    e.preventDefault();\n    //Check all fields\n    if (\n      newQuestion.Question === \"\" ||\n      newQuestion.answerA === \"\" ||\n      newQuestion.answerB === \"\" ||\n      newQuestion.answerC === \"\" ||\n      newQuestion.answerD === \"\" ||\n      newQuestion.correctAnswer === \"\"\n    ) {\n      alert(\"please fill all fields\");\n    } else {\n      //Put current question into questions array\n      setQuestions([...questions, newQuestion]);\n      //Allow only the right number of submits by incrementing count\n      if (count == numberOfQs) {\n        setQuizInfo({ ...quizInfo, questionsMade: true });\n        history.push(\"/quiz\");\n        done = true;\n      } else {\n        //Increase count for the key value of the new question\n        setCount((count = count + 1));\n        //Reset value of component level state after pushing to the questions array\n        setNewQuestion({\n          question: \"\",\n          answerA: \"\",\n          answerB: \"\",\n          answerC: \"\",\n          answerD: \"\",\n          correctAnswer: \"\",\n          key: count,\n        });\n        //Reset form data for every new question\n        reset();\n      }\n    }\n  };\n\n  //Review all questions, offer an edit\n  return (\n    <Fragment>\n      {done === false ? (\n        <div className=\"container\" id=\"questionForm\">\n          <div className=\"row\">\n            <div className=\"eight columns\">\n              <h2 id=\"formHeader\">\n                {quizName} <span className=\"subText\">by {author}</span>\n              </h2>\n            </div>\n          </div>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"four colums\">\n                <h5 id=\"questionNum\">Question #{count}</h5>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <label>What is the question you would like to ask</label>\n                <textarea\n                  onChange={onChange}\n                  type=\"text\"\n                  name=\"question\"\n                  className=\"u-full-width\"\n                  id=\"textArea\"\n                  style={{ resize: \"none\" }}\n                ></textarea>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <label>Answer: A</label>\n                <input\n                  type=\"text\"\n                  name=\"answerA\"\n                  id=\"answerA\"\n                  className=\"u-full-width\"\n                  onChange={onChange}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <label>Answer: B</label>\n                <input\n                  type=\"text\"\n                  name=\"answerB\"\n                  id=\"answerB\"\n                  className=\"u-full-width\"\n                  onChange={onChange}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <label>Answer: C</label>\n                <input\n                  type=\"text\"\n                  name=\"answerC\"\n                  id=\"answerC\"\n                  className=\"u-full-width\"\n                  onChange={onChange}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <label>Answer: D</label>\n                <input\n                  type=\"text\"\n                  name=\"answerD\"\n                  id=\"answerD\"\n                  className=\"u-full-width\"\n                  onChange={onChange}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <label>Correct Answer</label>\n                <input\n                  type=\"text\"\n                  name=\"correctAnswer\"\n                  id=\"correctAnswer\"\n                  className=\"u-full-width\"\n                  onChange={onChange}\n                />\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"eight columns\">\n                <button\n                  onClick={onClick}\n                  className=\"button-primary u-full-width\"\n                  id=\"submit\"\n                >\n                  Submit question\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h2>Thank you!</h2>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionForm;\n","import React, { useState } from \"react\";\n\nconst QuestionCard = ({ question, quizInfo }) => {\n  //Destructor\n  const {\n    question: Question,\n    answerA,\n    answerB,\n    answerC,\n    answerD,\n    correctAnswer,\n    key,\n  } = question;\n  const { quizName, author } = quizInfo;\n  //Set HTML variables\n  const choices = document.getElementById(`choices${key}`);\n  const answerDisplay = document.getElementById(`answerDisplay${key}`);\n  const questionDisplay = document.getElementById(`questionDisplay${key}`);\n  const fieldSet = document.getElementById(`fieldset${key}`);\n  const [answerChoice, setAnswerChoice] = useState(\"\");\n  //Event Handling\n  const onSubmit = (e) => {\n    e.preventDefault();\n    //Dispay right or wrong choices\n    choices.style.display = \"none\";\n    if (answerChoice === correctAnswer) {\n      fieldSet.style.backgroundColor = \"Green\";\n    } else {\n      fieldSet.style.backgroundColor = \"Red\";\n    }\n    //Styling for answer after choice was made\n    questionDisplay.style.color = \"white\";\n    questionDisplay.style.fontSize = \"larger\";\n    answerDisplay.innerText = `You answered \"${answerChoice}\", the correct answer was \"${correctAnswer}\".`;\n    //Disable form after choice was made\n    fieldSet.setAttribute(\"disabled\", \"true\");\n  };\n  //Set answer choice\n  const onChange = (e) => {\n    setAnswerChoice(e.target.value);\n  };\n  return (\n    <div className=\"cardWrapper\">\n      <h3 className=\"cardHeader\">Question #{key}</h3>\n      <form onSubmit={onSubmit}>\n        <fieldset id={\"fieldset\" + key}>\n          <p id={\"questionDisplay\" + key}>{Question}</p>\n          <p id={\"answerDisplay\" + key} className=\"answerDisplay\"></p>\n          <div id={\"choices\" + key} onChange={onChange}>\n            <input type=\"radio\" name={`answer` + key} value={answerA} />\n            <label htmlFor=\"answerA\">A: {answerA}</label>\n            <br></br>\n            <input type=\"radio\" name={`answer` + key} value={answerB} />\n            <label htmlFor=\"answerB\">B: {answerB}</label>\n\n            <br></br>\n            <input type=\"radio\" name={`answer` + key} value={answerC} />\n            <label htmlFor=\"answerC\">C: {answerC}</label>\n            <br></br>\n\n            <input type=\"radio\" name={`answer` + key} value={answerD} />\n            <label htmlFor=\"answerD\">D: {answerD}</label>\n            <br></br>\n          </div>\n          <button>Submit Answer</button>\n        </fieldset>\n      </form>\n    </div>\n  );\n};\n\nexport default QuestionCard;\n","import React, { Fragment } from \"react\";\nimport QuestionCard from \"./QuestionCard\";\n\nconst Display = ({ questions, quizInfo }) => {\n  //Take the questions array, loop through for every question, displaying QuestionCard element\n  const { quizName, author } = quizInfo;\n  return (\n    <div id=\"displayPage\">\n      <h2 id=\"formHeader\">\n        {quizName} <span className=\"subText\">by {author}</span>\n      </h2>\n      <div className=\"cardContainer\">\n        {questions.map((question) => (\n          <QuestionCard\n            question={question}\n            key={question.key}\n            quizInfo={quizInfo}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n//Components\nimport Welcome from \"./components/pages/Welcome\";\nimport QuestionForm from \"./components/pages/QuestionForm\";\nimport Display from \"./components/pages/Display\";\nimport Edit from \"./components/pages/Edit\";\n//Stying\nimport \"./App.css\";\n\nconst App = () => {\n  const [ready, setReady] = useState(\"False\");\n  const [quizInfo, setQuizInfo] = useState({\n    quizName: \"\",\n    author: \"\",\n    numberOfQs: \"\",\n    questionsMade: false,\n  });\n  const [questions, setQuestions] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => (\n              <Welcome\n                quizInfo={quizInfo}\n                setQuizInfo={setQuizInfo}\n                setReady={setReady}\n                ready={ready}\n              />\n            )}\n          />\n          <Route\n            path=\"/newquiz\"\n            render={(props) => (\n              <QuestionForm\n                quizInfo={quizInfo}\n                questions={questions}\n                setQuestions={setQuestions}\n                setQuizInfo={setQuizInfo}\n              />\n            )}\n          />\n          <Route\n            path=\"/quiz\"\n            render={(props) => (\n              <Display quizInfo={quizInfo} questions={questions} />\n            )}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}